
// find second largest element in the given array
	static int secondlargest(int a[],int n)
    {
        int largest=0;
        int res=-1;
        
        for(int i=1;i<n;i++)
        {
            if(a[i]>a[largest])
            {
                res=largest;
                largest=i;
            }
            else if(a[i]!=a[largest])
            {
                if(res==-1||a[i]>a[res])
                res=i;
            }
        }
        return res;
    }
    
    
  // this code will move every distinct element to the  starting and return new size.
	// array is sorted initialy
	static int RemoveDuplicates(int arr[]){
	    int ans = 1;
	    for(int i = 1; i<arr.length; i++){
	        if(arr[ans-1] != arr[i]){
	            arr[ans] = arr[i];
	            ans++;
	        }
	    }
	    return ans;
      }
      
      
	// move all '0' to the end of array
	static int MoveZerosToEnd(int arr[]){
        int count = 0;
         for(int i =0; i<arr.length;i++){
             if(arr[i] != 0){
                 int temp = arr[count];
                 arr[count] = arr[i];
                 arr[i] = temp;
                 count++;
             }
         }
         return count;
	}


// rotate the arr d times 
	// TC: O(n) ; SC: constant / O(1)
	// concept: reverse(arr,0,d-1); > reverse(arr,d,n-1); > reverse(arr,0,n-1);
	
	static void LeftRotateByD(int arr[], int d){
	    int n = arr.length;
        reverse(arr,0,d-1);
        reverse(arr,d,n-1);
        reverse(arr,0,n-1);
	}
	static void reverse(int arr[], int start,int end){
	    while(start<end){
	        int temp = arr[start];
	        arr[start] = arr[end];
	        arr[end] = temp;
	        start++;
	        end--;
	    }
	}
  

// Q) Leaders in an array
	// in this program we print all the elements who have bigger size from all the elements towards its right
	// TC: O(n);
	static void findLeader(int arr[]){
	    int n = arr.length;
	    int currentLead = arr[n-1];
	    System.out.println(currentLead);
	    for(int i = n-2; i>=0 ;i--){
	        if(arr[i] > currentLead){
	            currentLead = arr[i];
	            System.out.println(currentLead);
	        }
	    }
	}

 	
// Q) Maximum difference problem with order;
	// dif = arr[i] - arr[j] ; where i > j ;
	// TC: O(n)
	static void MaxDiff(int[] arr){
	    int minvalue = arr[0];
	    int dif = arr[1] - arr[0];
	    for(int i = 1;i< arr.length ;i++){
	        dif = Math.max(dif,arr[i]-minvalue);
	        minvalue = Math.min(minvalue,arr[i]);
	    }
	    System.out.println(dif);
	}

// Q) find and Printe frequency of sorted array.
//  TC: Theta(n)
static void printFreq(int arr[], int n)
    {
    	int freq = 1, i = 1;

    	while(i < n)
    	{
    		while(i < n && arr[i] == arr[i - 1])
    		{
    			freq++;
    			i++;
    		}

    		System.out.println(arr[i - 1] + " " + freq);

    		i++;
    		freq = 1;
    	}
    	if(n==1 || arr[n-1]!=arr[n-2])
    	System.out.println(arr[n-1]+" "+ 1) ;
    }
    

// Q) Stock by and sell ; maximize profit ; in order;
	
	// Naive solution; recursion ; TC: 
	// price[] = array ; start = 0; end = array size - 1;
	static int maxProfit(int price[], int start, int end){
    	if(end <= start) return 0;
    	int profit = 0;

    	for(int i = start; i < end; i++)
    		for(int j = i + 1; j <= end; j++)
    			if(price[j] > price[i]){
    				int curr_profit = price[j] - price[i] 
    								  + maxProfit(price, start, i - 1)
    								  + maxProfit(price, j + 1, end);

    				profit = Math.max(profit, curr_profit);
    			}
    	return profit;
    }
    
    // Effective solution ; TC: Theta(n)
    static int maxProfit1(int price[]){
        int profit = 0;
         for(int i=1;i<price.length; i++){
             if(price[i]>price[i-1]) profit += price[i] - price[i-1];
         }
        return profit;    
    }


// Q) Trapping Rain Water problem 
    // TC: O(n);
    public int trap(int[] arr) {
        int res = 0;
        int n = arr.length;
    	int lMax[] = new int[n];
    	int rMax[] = new int[n];

    	lMax[0] = arr[0];
    	for(int i = 1; i < n; i++)
    		lMax[i] = Math.max(arr[i], lMax[i - 1]);


    	rMax[n - 1] = arr[n - 1];
    	for(int i = n - 2; i >= 0; i--)
    		rMax[i] = Math.max(arr[i], rMax[i + 1]);

    	for(int i = 1; i < n - 1; i++)
    		res = res + (Math.min(lMax[i], rMax[i]) - arr[i]);
    	
    	return res;
    }

